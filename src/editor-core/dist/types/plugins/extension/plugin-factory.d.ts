import { ExtensionState } from './types';
export declare const createPluginState: (dispatch: import("../../event-dispatcher").Dispatch<any>, initialState: ExtensionState<import("@atlaskit/editor-common").Parameters> | ((state: import("prosemirror-state").EditorState<any>) => ExtensionState<import("@atlaskit/editor-common").Parameters>)) => import("prosemirror-state").StateField<ExtensionState<import("@atlaskit/editor-common").Parameters>, import("prosemirror-model").Schema<any, any>>;
export declare const createCommand: <A = import("./types").ExtensionAction<import("@atlaskit/editor-common").Parameters>>(action: A | ((state: Readonly<import("prosemirror-state").EditorState<any>>) => false | A), transform?: ((tr: import("prosemirror-state").Transaction<any>, state: import("prosemirror-state").EditorState<any>) => import("prosemirror-state").Transaction<any>) | undefined) => import("../..").Command;
export declare const getPluginState: (state: import("prosemirror-state").EditorState<any>) => ExtensionState<import("@atlaskit/editor-common").Parameters>;
