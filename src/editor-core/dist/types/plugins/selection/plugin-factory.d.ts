import { Transaction } from 'prosemirror-state';
import { SelectionPluginState } from './types';
export declare const createCommand: <A = import("./actions").SelectionAction>(action: A | ((state: Readonly<import("prosemirror-state").EditorState<any>>) => false | A), transform?: ((tr: Transaction<any>, state: import("prosemirror-state").EditorState<any>) => Transaction<any>) | undefined) => import("../..").Command, getPluginState: (state: import("prosemirror-state").EditorState<any>) => SelectionPluginState, createPluginState: (dispatch: import("../../event-dispatcher").Dispatch<any>, initialState: SelectionPluginState | ((state: import("prosemirror-state").EditorState<any>) => SelectionPluginState)) => import("prosemirror-state").StateField<SelectionPluginState, import("prosemirror-model").Schema<any, any>>;
